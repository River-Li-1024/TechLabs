#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string>
#include <iostream>
#include <map>
#include <vector>
#include <set>
#include <ctime>
#include <stack>
#include <queue>
#include <memory>

#ifdef OPERATOR_NEW_STANDARD
/////////////////////////////////////////////////////////////////
// 标准的operator new/delete
void* operator new(std::size_t sz) throw(std::bad_alloc)
{
    printf("standard new alloc %d bytes\n", sz);
    if (sz == 0) {
        sz = 1;
    }

    while (true) {
        void* ptr = malloc(sz);
        if (ptr) {
            return ptr;
        }
        std::new_handler handler = std::get_new_handler();
        if (handler != nullptr) {
            handler();
        }
        else {
            throw std::bad_alloc();
        }
    }
}

void operator delete(void* ptr) throw()
{
    printf("standard delete %p\n", ptr);
    if (ptr)
    {
        free(ptr);
        ptr = nullptr;
    }
}
#endif OPERATOR_NEW_STANDARD


/////////////////////////////////////////////////////////////////
// 带越界检查的 operator new/delete
static const int signature = 0xDEADBEEF;    // 边界符
typedef char Byte

void* operator new(std::size_t sz) throw(std::bad_alloc)
{
    if (sz == 0) {
        sz = 0;
    }

    sz = sz + 2 * sizeof(int);
    void *ptr = malloc(sz);
    if (ptr) {
        return ptr;
    }

    while (true) {
        std::new_handler handler = std::get_new_handler();
        if (handler) {
            handler();
        } else {
            throw std::bad_alloc;
        }
    }
}

/////////////////////////////////////////////////////////////////
// 测试代码
class TestBase
{
public:
    int id;
    TestBase() : id(100)
    {
    }
};
int main(int argc, char **argv)
{
    TestBase * ptr = new TestBase();
    delete ptr;

    getchar();
    return 0;
}